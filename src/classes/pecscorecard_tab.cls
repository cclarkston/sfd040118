public without sharing class pecscorecard_tab {
  public PEC_Scorecard__c last_consultation {get; set;}
  public PEC_Scorecard__c last_roleplay {get; set;}
  public PEC_Scorecard__c last_roleplay_callback {get; set;}
  public PEC_Scorecard__c last_callback {get; set;}
  	
  public Integer my_consults_scored_last_month {get; set;}
  public Decimal my_consults_avg_last_month {get; set;}
  public PEC_Scorecard__c my_consults_high_last_month {get; set;}
  public PEC_Scorecard__c my_consults_low_last_month {get; set;}
  public Integer my_consults_scored_this_month {get; set;}
  public Decimal my_consults_avg_this_month {get; set;}
  public PEC_Scorecard__c my_consults_high_this_month {get; set;}
  public PEC_Scorecard__c my_consults_low_this_month {get; set;}
  public Integer my_consults_scored_this_year {get; set;}
  public Decimal my_consults_avg_this_year {get; set;}
  public PEC_Scorecard__c my_consults_high_this_year {get; set;}
  public PEC_Scorecard__c my_consults_low_this_year {get; set;}
  
  public Integer company_consults_scored_last_month {get; set;}
  public Decimal company_consults_avg_last_month {get; set;}
  public PEC_Scorecard__c company_consults_high_last_month {get; set;}
  public PEC_Scorecard__c company_consults_low_last_month {get; set;}
  public Integer company_consults_scored_this_month {get; set;}
  public Decimal company_consults_avg_this_month {get; set;}
  public PEC_Scorecard__c company_consults_high_this_month {get; set;}
  public PEC_Scorecard__c company_consults_low_this_month {get; set;}
  public Integer company_consults_scored_this_year {get; set;}
  public Decimal company_consults_avg_this_year {get; set;}
  public PEC_Scorecard__c company_consults_high_this_year {get; set;}
  public PEC_Scorecard__c company_consults_low_this_year {get; set;}
  
  public Integer my_roleplay_scored_last_month {get; set;}
  public Decimal my_roleplay_avg_last_month {get; set;}
  public PEC_Scorecard__c my_roleplay_high_last_month {get; set;}
  public PEC_Scorecard__c my_roleplay_low_last_month {get; set;}
  public Integer my_roleplay_scored_this_month {get; set;}
  public Decimal my_roleplay_avg_this_month {get; set;}
  public PEC_Scorecard__c my_roleplay_high_this_month {get; set;}
  public PEC_Scorecard__c my_roleplay_low_this_month {get; set;}
  public Integer my_roleplay_scored_this_year {get; set;}
  public Decimal my_roleplay_avg_this_year {get; set;}
  public PEC_Scorecard__c my_roleplay_high_this_year {get; set;}
  public PEC_Scorecard__c my_roleplay_low_this_year {get; set;}
  
  public Integer company_roleplay_scored_last_month {get; set;}
  public Decimal company_roleplay_avg_last_month {get; set;}
  public PEC_Scorecard__c company_roleplay_high_last_month {get; set;}
  public PEC_Scorecard__c company_roleplay_low_last_month {get; set;}
  public Integer company_roleplay_scored_this_month {get; set;}
  public Decimal company_roleplay_avg_this_month {get; set;}
  public PEC_Scorecard__c company_roleplay_high_this_month {get; set;}
  public PEC_Scorecard__c company_roleplay_low_this_month {get; set;}
  public Integer company_roleplay_scored_this_year {get; set;}
  public Decimal company_roleplay_avg_this_year {get; set;}
  public PEC_Scorecard__c company_roleplay_high_this_year {get; set;}
  public PEC_Scorecard__c company_roleplay_low_this_year {get; set;}

  public Integer my_callbacks_scored_last_month {get; set;}
  public Decimal my_callbacks_avg_last_month {get; set;}
  public PEC_Scorecard__c my_callbacks_high_last_month {get; set;}
  public PEC_Scorecard__c my_callbacks_low_last_month {get; set;}
  public Integer my_callbacks_scored_this_month {get; set;}
  public Decimal my_callbacks_avg_this_month {get; set;}
  public PEC_Scorecard__c my_callbacks_high_this_month {get; set;}
  public PEC_Scorecard__c my_callbacks_low_this_month {get; set;}
  public Integer my_callbacks_scored_this_year {get; set;}
  public Decimal my_callbacks_avg_this_year {get; set;}
  public PEC_Scorecard__c my_callbacks_high_this_year {get; set;}
  public PEC_Scorecard__c my_callbacks_low_this_year {get; set;}
  
  public Integer company_callbacks_scored_last_month {get; set;}
  public Decimal company_callbacks_avg_last_month {get; set;}
  public PEC_Scorecard__c company_callbacks_high_last_month {get; set;}
  public PEC_Scorecard__c company_callbacks_low_last_month {get; set;}
  public Integer company_callbacks_scored_this_month {get; set;}
  public Decimal company_callbacks_avg_this_month {get; set;}
  public PEC_Scorecard__c company_callbacks_high_this_month {get; set;}
  public PEC_Scorecard__c company_callbacks_low_this_month {get; set;}
  public Integer company_callbacks_scored_this_year {get; set;}
  public Decimal company_callbacks_avg_this_year {get; set;}
  public PEC_Scorecard__c company_callbacks_high_this_year {get; set;}
  public PEC_Scorecard__c company_callbacks_low_this_year {get; set;}
  
  public Integer my_roleplay_callback_scored_last_month {get; set;}
  public Decimal my_roleplay_callback_avg_last_month {get; set;}
  public PEC_Scorecard__c my_roleplay_callback_high_last_month {get; set;}
  public PEC_Scorecard__c my_roleplay_callback_low_last_month {get; set;}
  public Integer my_roleplay_callback_scored_this_month {get; set;}
  public Decimal my_roleplay_callback_avg_this_month {get; set;}
  public PEC_Scorecard__c my_roleplay_callback_high_this_month {get; set;}
  public PEC_Scorecard__c my_roleplay_callback_low_this_month {get; set;}
  public Integer my_roleplay_callback_scored_this_year {get; set;}
  public Decimal my_roleplay_callback_avg_this_year {get; set;}
  public PEC_Scorecard__c my_roleplay_callback_high_this_year {get; set;}
  public PEC_Scorecard__c my_roleplay_callback_low_this_year {get; set;}
  
  public Integer company_roleplay_callback_scored_last_month {get; set;}
  public Decimal company_roleplay_callback_avg_last_month {get; set;}
  public PEC_Scorecard__c company_roleplay_callback_high_last_month {get; set;}
  public PEC_Scorecard__c company_roleplay_callback_low_last_month {get; set;}
  public Integer company_roleplay_callback_scored_this_month {get; set;}
  public Decimal company_roleplay_callback_avg_this_month {get; set;}
  public PEC_Scorecard__c company_roleplay_callback_high_this_month {get; set;}
  public PEC_Scorecard__c company_roleplay_callback_low_this_month {get; set;}
  public Integer company_roleplay_callback_scored_this_year {get; set;}
  public Decimal company_roleplay_callback_avg_this_year {get; set;}
  public PEC_Scorecard__c company_roleplay_callback_high_this_year {get; set;}
  public PEC_Scorecard__c company_roleplay_callback_low_this_year {get; set;}
  
  public Integer page = 1;
  public Integer num_pages = 0;
  public Integer getpage() {return page;}
  public Integer getnum_pages() {return num_pages;}
  Integer record_count;
  Double page_holder;
  public Integer records_per_page {get; set;}
  public boolean display_next = true;
  public boolean display_prev = false;
  public boolean getdisplay_next() { return display_next; }
  public boolean getdisplay_prev() { return display_prev; }
  public boolean completed_cards {get; set;}
  
  public List<PEC_Scorecard__c> score_search_results {get;set;}
  public List<Weekly_Huddle__c> huddle_search_results {get; set;}
  
  public PEC_Scorecard__c start_filter {get; set;}
  public PEC_Scorecard__c end_filter {get; set;}
  public String card_type {get; set;} 
  public String sort_order;
  public String huddle_sort_order;
  public String region_filter {get; set;}
 
  
  public pecscorecard_tab() {
  	completed_cards = true;
  	records_per_page = 10;
  	region_filter = 'any';
  	card_type = 'any';
  	sort_order = 'score_date__c desc';
  	huddle_sort_order = 'week_start__c desc';
  	Datetime start_of_yesterday = Datetime.newinstance(System.today().adddays(-1).year(),System.today().adddays(-1).month(),System.today().adddays(-1).day(),0,0,0);
  	start_filter = new PEC_Scorecard__c(pec_scored__c = userinfo.getuserid(), Score_Date__c = start_of_yesterday);
  	end_filter = new PEC_Scorecard__c(Score_Date__c = System.now().adddays(1));
  	
  	//grab our summary numbers
  	my_consults_scored_last_month = [select count() from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Consult' and pec_scored__c = :userinfo.getuserid()];
  	my_consults_scored_this_month = [select count() from PEC_Scorecard__c where scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Consult' and pec_scored__c = :userinfo.getuserid() and score_date__c = this_month];
  	my_consults_scored_this_year = [select count() from PEC_Scorecard__c where scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Consult' and pec_scored__c = :userinfo.getuserid() and score_date__c = this_year];
  	company_consults_scored_last_month = [select count() from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Consult'];
  	company_consults_scored_this_month = [select count() from PEC_Scorecard__c where score_date__c = this_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Consult'];
  	company_consults_scored_this_year = [select count() from PEC_Scorecard__c where score_date__c = this_year and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Consult'];
  	
  	my_roleplay_scored_last_month = [select count() from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Consult' and pec_scored__c = :userinfo.getuserid()];
  	my_roleplay_scored_this_month = [select count() from PEC_Scorecard__c where scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Consult' and pec_scored__c = :userinfo.getuserid() and score_date__c = this_month];
  	my_roleplay_scored_this_year = [select count() from PEC_Scorecard__c where scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Consult' and pec_scored__c = :userinfo.getuserid() and score_date__c = this_year];
  	company_roleplay_scored_last_month = [select count() from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Consult'];
  	company_roleplay_scored_this_month = [select count() from PEC_Scorecard__c where score_date__c = this_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Consult'];
  	company_roleplay_scored_this_year = [select count() from PEC_Scorecard__c where score_date__c = this_year and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Consult'];
  	
  	my_roleplay_callback_scored_last_month = [select count() from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Call Back' and pec_scored__c = :userinfo.getuserid()];
  	my_roleplay_callback_scored_this_month = [select count() from PEC_Scorecard__c where scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Call Back' and pec_scored__c = :userinfo.getuserid() and score_date__c = this_month];
  	my_roleplay_callback_scored_this_year = [select count() from PEC_Scorecard__c where scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Call Back' and pec_scored__c = :userinfo.getuserid() and score_date__c = this_year];
  	company_roleplay_callback_scored_last_month = [select count() from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Call Back'];
  	company_roleplay_callback_scored_this_month = [select count() from PEC_Scorecard__c where score_date__c = this_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Call Back'];
  	company_roleplay_callback_scored_this_year = [select count() from PEC_Scorecard__c where score_date__c = this_year and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Role Play Call Back'];
  	
  	my_callbacks_scored_last_month = [select count() from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Call Back' and pec_scored__c = :userinfo.getuserid()];
  	my_callbacks_scored_this_month = [select count() from PEC_Scorecard__c where scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Call Back' and pec_scored__c = :userinfo.getuserid() and score_date__c = this_month];
  	my_callbacks_scored_this_year = [select count() from PEC_Scorecard__c where scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Call Back' and pec_scored__c = :userinfo.getuserid() and score_date__c = this_year];
  	company_callbacks_scored_last_month = [select count() from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Call Back'];
  	company_callbacks_scored_this_month = [select count() from PEC_Scorecard__c where score_date__c = this_month and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Call Back'];
  	company_callbacks_scored_this_year = [select count() from PEC_Scorecard__c where score_date__c = this_year and scorecard_completed__c = true and qualified_scorecard__c = true and recordtype.name = 'Call Back'];
  	
    for(Aggregateresult ar : database.query('select recordtype.name ctype, sum(total_score__c) total_score, sum(total_possible_score__c) possible_score  from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true group by recordtype.name')) {
      if((String)ar.get('ctype')=='Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          company_consults_avg_last_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          company_roleplay_avg_last_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          company_roleplay_callback_avg_last_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          company_callbacks_avg_last_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
    }
    
    for(Aggregateresult ar : database.query('select recordtype.name ctype, sum(total_score__c) total_score, sum(total_possible_score__c) possible_score  from PEC_Scorecard__c where score_date__c = this_month and scorecard_completed__c = true and qualified_scorecard__c = true group by recordtype.name')) {
      if((String)ar.get('ctype')=='Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          company_consults_avg_this_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          company_roleplay_avg_this_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          company_roleplay_callback_avg_this_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          company_callbacks_avg_this_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
    }
    
    for(Aggregateresult ar : database.query('select recordtype.name ctype, sum(total_score__c) total_score, sum(total_possible_score__c) possible_score  from PEC_Scorecard__c where score_date__c = this_year and scorecard_completed__c = true and qualified_scorecard__c = true group by recordtype.name')) {
      if((String)ar.get('ctype')=='Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          company_consults_avg_this_year = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          company_roleplay_avg_this_year = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          company_roleplay_callback_avg_this_year = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          company_callbacks_avg_this_year = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
    }
    
    for(Aggregateresult ar : database.query('select recordtype.name ctype, sum(total_score__c) total_score, sum(total_possible_score__c) possible_score  from PEC_Scorecard__c where score_date__c = last_month and scorecard_completed__c = true and qualified_scorecard__c = true and pec_scored__c = \'' + userinfo.getuserid() + '\' group by recordtype.name')) {
      if((String)ar.get('ctype')=='Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          my_consults_avg_last_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          my_roleplay_avg_last_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          my_roleplay_callback_avg_last_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');          
      if((String)ar.get('ctype')=='Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          my_callbacks_avg_last_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
    }
    
    for(Aggregateresult ar : database.query('select recordtype.name ctype, sum(total_score__c) total_score, sum(total_possible_score__c) possible_score  from PEC_Scorecard__c where score_date__c = this_month and scorecard_completed__c = true and qualified_scorecard__c = true and pec_scored__c = \'' + userinfo.getuserid() + '\' group by recordtype.name')) {
      if((String)ar.get('ctype')=='Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          my_consults_avg_this_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          my_roleplay_avg_this_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          my_roleplay_callback_avg_this_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');          
      if((String)ar.get('ctype')=='Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          my_callbacks_avg_this_month = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
    }
    
    for(Aggregateresult ar : database.query('select recordtype.name ctype, sum(total_score__c) total_score, sum(total_possible_score__c) possible_score  from PEC_Scorecard__c where score_date__c = this_year and scorecard_completed__c = true and qualified_scorecard__c = true and pec_scored__c = \'' + userinfo.getuserid() + '\' group by recordtype.name')) {
      if((String)ar.get('ctype')=='Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          my_consults_avg_this_year = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          my_roleplay_avg_this_year = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
      if((String)ar.get('ctype')=='Role Play Consult') 
        if((Decimal)ar.get('possible_score') > 0)
          my_roleplay_callback_avg_this_year = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');          
      if((String)ar.get('ctype')=='Call Back') 
        if((Decimal)ar.get('possible_score') > 0)
          my_callbacks_avg_this_year = (Decimal)ar.get('total_score') / (Decimal)ar.get('possible_score');
    }
    
    //grab the last consultation, roleplay,  and callback scorecard for the current user
  	try {
  	  last_consultation = [Select p.Total_Score__c, p.Total_Possible_Score__c, p.Score_Date__c, p.Id From PEC_Scorecard__c p where scorecard_completed__c = true and recordtype.name = 'Consult' and pec_scored__c = :userinfo.getuserid() order by score_date__c desc limit 1];
  	}
  	catch (Exception e) {
  	  last_consultation = null;	
  	}
  	try {
  	  last_roleplay = [Select p.Total_Score__c, p.Total_Possible_Score__c, p.Score_Date__c, p.Id From PEC_Scorecard__c p where scorecard_completed__c = true and recordtype.name = 'Role Play Consult' and pec_scored__c = :userinfo.getuserid() order by score_date__c desc limit 1];
  	}
  	catch (Exception e) {
  	  last_roleplay = null;	
  	}
  	try {
  	  last_callback = [Select p.Total_Score__c, p.Total_Possible_Score__c, p.Score_Date__c, p.Id From PEC_Scorecard__c p where scorecard_completed__c = true and recordtype.name = 'Call Back' and pec_scored__c = :userinfo.getuserid() order by score_date__c desc limit 1];
  	}
  	catch (Exception e) {
  	  last_callback = null;	
  	}
  	try {
  	  last_roleplay_callback = [Select p.Total_Score__c, p.Total_Possible_Score__c, p.Score_Date__c, p.Id From PEC_Scorecard__c p where scorecard_completed__c = true and recordtype.name = 'Role Play Consult' and pec_scored__c = :userinfo.getuserid() order by score_date__c desc limit 1];
  	}
  	catch (Exception e) {
  	  last_roleplay_callback = null;	
  	}
    
    refresh_scorecard_list();
  }
  
  public String getlast_consult_date() {
  	return last_consultation.score_date__c.format('M/dd/yyyy');
  }
  
  public String getlast_callback_date() {
  	return last_callback.score_date__c.format('M/dd/yyyy');
  }
  
  public String getlast_roleplay_date() {
  	return last_roleplay.score_date__c.format('M/dd/yyyy');
  }
  
  public String getlast_roleplay_callback_date() {
  	return last_roleplay_callback.score_date__c.format('M/dd/yyyy');
  }
  
  public void run_search() {
  	page = 1;
  	refresh_scorecard_list();
  }
  
  public List<SelectOption> getRegionOptions() {
    List<SelectOption> options = new List<SelectOption>();
    options.add(new SelectOption('any','All Regions'));
    for(Sales_region__c sr : [select name from Sales_Region__c]) {
      options.add(new SelectOption(sr.name,sr.name));
    } 
    return options;
  }
  
  public boolean getdisplay_user_search() {
  	boolean display_search = false;
  	User u = [Select u.Profile.Name, u.ProfileId, u.Name, u.Id, u.UserRole.Name From User u where id = :userinfo.getuserid()];
    if(u.profile.name=='RBD' || u.profile.name=='RSM')
      display_search = true;
    //modified by cm on 8/2/2017 - switching this to look at userrole    
    //else if(u.name=='Julie Soukup' || u.name=='Mindy Smith' || u.name=='Andrew Kimball' || u.name=='Krista Schaad' || u.name=='Chris McDowell')
      //display_search = true;    
    else if(u.userrole.name=='Performance Team')
      display_search = true;
    return display_search;
  }
    
  public void refresh_scorecard_list() {  	
  	if(card_type!='Huddle') {
	    score_search_results = new List<PEC_Scorecard__c>();
	    String query_filter = ' createdbyid != null ';
	    if(completed_cards)
	      query_filter += ' and scorecard_completed__c = true ';
	    //String query_filter = ' scorecard_completed__c = true ';   
	    if(region_filter!='any') {
	      //pull a list of the centers tied to this sales region
	      String parsed_center_list = '(';
	      System.debug('Region Filter : ' + region_filter);
	      for(Center_Information__c ci : [select id,name from Center_Information__c where sales_region__c = :region_filter]) {
	      	parsed_center_list += '\'' + ci.id + '\',';
	      }
	      parsed_center_list += '\'NA\')';    
	      query_filter += ' and pec_scored__r.center_pec__c in ' + parsed_center_list;
	      System.debug('Query filter with center list : ' + query_filter);  
	    }            
	    if(card_type!='any')
	      query_filter += ' and recordtypeid = \'' + card_type + '\' ';
	    if(start_filter.pec_scored__c!=null) {
	      if(getdisplay_user_search())
	        query_filter += ' and pec_scored__c = \'' + start_filter.pec_scored__c + '\' ';
	      else
	        query_filter += ' and (pec_scored__c = \'' + start_filter.pec_scored__c + '\' or createdbyid = \'' + start_filter.pec_scored__c + '\') ';	      
	    }
	    if(start_filter.score_date__c!=null) 
	      query_filter += ' and score_date__c >= ' + start_filter.score_date__c.format('yyyy-MM-dd\'T\'hh:mm:ss\'Z\'') + ' ';
	    if(end_filter.score_date__c!=null)
	      query_filter += ' and score_date__c <= ' + end_filter.score_date__c.format('yyyy-MM-dd\'T\'hh:mm:ss\'Z\'') + ' ';
	    System.debug('Query filter ' + query_filter);
	    System.debug('Full Query ' + 'select pec_scored__r.name,pec_scored__c,score_date__c,recordtype.name,recordtypeid,createdbyid,createdby.name,overall_score__c,total_score__c,total_possible_score__c from PEC_Scorecard__c where ' + query_filter + ' order by ' + sort_order);
	    List<Pec_Scorecard__c> all_scorecards = database.query('select pec_scored__r.name,pec_scored__c,score_date__c,recordtype.name,recordtypeid,createdbyid,createdby.name,overall_score__c,total_score__c,total_possible_score__c from PEC_Scorecard__c where ' + query_filter + ' order by ' + sort_order);
	    record_count = all_scorecards.size();
	    page_holder = math.ceil((record_count/records_per_page));                               
	    num_pages = page_holder.intvalue();
	    //only here because for some reason ceil is rounding down!              
	    if(math.mod(record_count, records_per_page)>0)
	      num_pages++;
	    Integer low_range = (page - 1) * records_per_page;
	    Integer high_range = page * records_per_page;
	    Integer cnt = 1;
	    if(page > 1)
	      display_prev = true;
	    else
	      display_prev = false;
	    if(num_pages > 1 && page < num_pages)
	      display_next = true;
	    else
	      display_next = false;      
	    for(Pec_Scorecard__c my_card : all_scorecards) {
	      if(cnt > low_range && cnt <= high_range)
	        score_search_results.add(my_card); 
	      cnt++;                        
	    }   
  	}   
  	else {
  	  huddle_search_results = new List<Weekly_Huddle__c>();
	    String query_filter = ' createdbyid != null ';   
	    if(region_filter!='any') {
	      //pull a list of the centers tied to this sales region
	      String parsed_center_list = '(';
	      System.debug('Region Filter : ' + region_filter);
	      for(Center_Information__c ci : [select id,name from Center_Information__c where sales_region__c = :region_filter]) {
	      	parsed_center_list += '\'' + ci.id + '\',';
	      }
	      parsed_center_list += '\'NA\')';    
	      query_filter += ' and CreatedBy.Center_PEC__c in ' + parsed_center_list;
	      System.debug('Query filter with center list : ' + query_filter);  
	    }            
	    if(start_filter.pec_scored__c!=null)
	      query_filter += ' and createdbyid = \'' + start_filter.pec_scored__c + '\' ';
	    if(start_filter.score_date__c!=null) 
	      query_filter += ' and week_start__c >= ' + start_filter.score_date__c.format('yyyy-MM-dd') + ' ';
	    if(end_filter.score_date__c!=null)
	      query_filter += ' and week_start__c <= ' + end_filter.score_date__c.format('yyyy-MM-dd') + ' ';
	    System.debug('Query filter ' + query_filter);
	    System.debug('Full Query ' + 'Select w.Week_Start__c, w.SystemModstamp, w.ScoreCard_Completed__c, w.Rainmaker_What_Score__c, w.Rainmaker_Sub_Skill_Category__c, w.Rainmaker_Skill_Category__c, w.Rainmaker_How_Score__c, w.Pulse_Check__c, w.OwnerId, w.Number_of_Callbacks__c, w.Name, w.LastModifiedDate, w.LastModifiedById, w.IsDeleted, w.Id, w.CreatedDate, w.CreatedBy.name, w.CreatedById, w.Completed_Time__c, w.Close_Rate_Goal__c From Weekly_Huddle__c w where ' + query_filter + ' order by ' + huddle_sort_order);
	    List<Weekly_Huddle__c> all_scorecards = database.query('Select w.Week_Start__c, w.SystemModstamp, w.ScoreCard_Completed__c, w.Rainmaker_What_Score__c, w.Rainmaker_Sub_Skill_Category__c, w.Rainmaker_Skill_Category__c, w.Rainmaker_How_Score__c, w.Pulse_Check__c, w.OwnerId, w.Number_of_Callbacks__c, w.Name, w.LastModifiedDate, w.LastModifiedById, w.IsDeleted, w.Id, w.CreatedDate, w.CreatedBy.name, w.CreatedById, w.Completed_Time__c, w.Close_Rate_Goal__c From Weekly_Huddle__c w where ' + query_filter + ' order by ' + huddle_sort_order);
	    record_count = all_scorecards.size();
	    page_holder = math.ceil((record_count/records_per_page));                               
	    num_pages = page_holder.intvalue();
	    //only here because for some reason ceil is rounding down!              
	    if(math.mod(record_count, records_per_page)>0)
	      num_pages++;
	    Integer low_range = (page - 1) * records_per_page;
	    Integer high_range = page * records_per_page;
	    Integer cnt = 1;
	    if(page > 1)
	      display_prev = true;
	    else
	      display_prev = false;
	    if(num_pages > 1 && page < num_pages)
	      display_next = true;
	    else
	      display_next = false;      
	    for(Weekly_Huddle__c my_card : all_scorecards) {
	      if(cnt > low_range && cnt <= high_range)
	        huddle_search_results.add(my_card); 
	      cnt++;                        
	    }
  	} 
  }
  
  public void next() {
    page++;
    refresh_scorecard_list();
  }
        
  public void prev() {
    page = page - 1;
    refresh_scorecard_list();
  }
  
  public List<SelectOption> getCardTypeOptions() {
    List<SelectOption> options = new List<SelectOption>();
    options.add(new SelectOption('any','All (Except Huddles)'));
    for(RecordType rt : [Select r.SobjectType, r.Name, r.Id From RecordType r where sobjecttype = 'PEC_Scorecard__c']) {
      options.add(new SelectOption(rt.id,rt.name));
    }
    options.add(new SelectOption('Huddle','Weekly Huddle'));
    return options;
  }
  
  public Integer getnum_scorecards() {
  	Integer num_matches = 0;
  	try {
  	  num_matches = score_search_results.size();
  	}
  	catch (Exception e) {
  	}
  	return num_matches;
  }
  
  public Integer getnum_huddles() {
  	Integer num_matches = 0;
  	try {
  	  num_matches = huddle_search_results.size();
  	}
  	catch (Exception e) {
  	}
  	return num_matches;
  }
  
  public void pec_sort() {
  	page = 1;
  	if(sort_order=='pec_scored__r.name')
  	  sort_order = 'pec_scored__r.name desc';
  	else
  	  sort_order = 'pec_scored__r.name';
  	refresh_scorecard_list();
  }
  
  public void huddle_pec_sort() {
  	page = 1;
  	if(huddle_sort_order=='createdby.name')
  	  huddle_sort_order = 'createdby.name desc';
  	else
  	  huddle_sort_order = 'createdby.name';
  	refresh_scorecard_list();
  }
  
  public void date_sort() {
  	page = 1;
  	if(sort_order=='score_date__c')
  	  sort_order = 'score_date__c desc';
  	else
  	  sort_order = 'score_date__c';
  	refresh_scorecard_list();
  }
  
  public void huddle_date_sort() {
  	page = 1;
  	if(huddle_sort_order=='week_start__c')
  	  huddle_sort_order = 'week_start__c desc';
  	else
  	  huddle_sort_order = 'week_start__c';
  	refresh_scorecard_list();
  }
  
  public void card_sort() {
  	page = 1;
  	if(sort_order=='recordtype.name')
  	  sort_order = 'recordtype.name desc';
  	else
  	  sort_order = 'recordtype.name';
  	refresh_scorecard_list();
  }
  
  public void coach_sort() {
  	page = 1;
  	if(sort_order=='createdby.name')
  	  sort_order = 'createdby.name desc';
  	else
  	  sort_order = 'createdby.name';
  	refresh_scorecard_list();
  }
  
  public void score_sort() {
  	page = 1;
  	if(sort_order=='overall_score__c')
  	  sort_order = 'overall_score__c desc';
  	else
  	  sort_order = 'overall_score__c';
  	refresh_scorecard_list();
  }
  
}